{"version":3,"sources":["components/Menu.js","components/BoardCell.js","components/Board.js","business/Input.js","business/Cell.js","business/Tetrominoes.js","business/Board.js","business/PlayerController.js","components/GameController.js","hooks/useDropTime.js","hooks/useInterval.js","components/GameStats.js","components/Preview.js","components/Previews.js","hooks/usePlayer.js","components/Tetris.js","hooks/useGameStats.js","hooks/useBoard.js","components/Game.js","hooks/useGameOver.js","App.js","index.js"],"names":["Menu","onClick","className","BoardCell","cell","Board","board","boardStyles","gridTemplateRows","size","rows","gridTemplateColumns","columns","style","map","row","y","x","Action","Left","FastDrop","Pause","Quit","Right","Rotate","SlowDrop","Key","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","KeyQ","KeyP","Space","actionIsDrop","action","includes","actionForKey","keyCode","defaultCell","occupied","TETROMINOES","I","shape","J","L","O","S","T","Z","randomTetromino","keys","Object","key","Math","floor","random","length","transferToBoard","isOccupied","position","forEach","_y","_x","column","buildBoard","Array","from","nextBoard","player","resetPlayer","addLinesCleared","tetromino","dropPosition","max","i","movePlayer","delta","collided","findDropPosition","isFastDropping","blankRow","_","linesCleared","reduce","acc","every","unshift","push","hasCollision","isWithinBoard","desiredNextPosition","isOnBoard","nextPosition","playerController","setPlayer","setGameOver","piece","direction","newPiece","index","reverse","rotate","attemptRotation","isGameOver","attemptMovement","GameController","gameStats","useState","dropTime","setDropTime","previousDropTime","setPreviousDropTime","resumeDropTime","useCallback","pauseDropTime","useEffect","speed","level","newDropTime","useDropTime","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","handleInput","type","onKeyDown","code","onKeyUp","autoFocus","GameStats","points","linesCompleted","linesToLevel","linesPerLevel","React","memo","Preview","top","Previews","tetrominoes","previewTetrominoes","slice","buildPlayer","previous","fill","pop","Tetris","setGameStats","lines","newLinesCompleted","useGameStats","prev","usePlayer","setBoard","previousBoard","useBoard","Game","gameOver","resetGameOver","useGameOver","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.e94db8a5.chunk.js","sourcesContent":["import \"./Menu.css\";\r\n\r\nconst Menu = ({ onClick }) => (\r\n  <div className=\"Menu\">\r\n    <button className=\"Button\" onClick={onClick}>\r\n      Play Tetris\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default Menu;\r\n","import \"./BoardCell.css\";\r\n\r\nconst BoardCell = ({ cell }) => (\r\n  <div className={`BoardCell ${cell.className}`}>\r\n    <div className=\"Sparkle\"></div>\r\n  </div>\r\n);\r\n\r\nexport default BoardCell;\r\n","import \"./Board.css\";\r\n\r\nimport BoardCell from \"./BoardCell\";\r\n\r\nconst Board = ({ board }) => {\r\n  const boardStyles = {\r\n    gridTemplateRows: `repeat(${board.size.rows}, 1fr)`,\r\n    gridTemplateColumns: `repeat(${board.size.columns}, 1fr)`\r\n  };\r\n\r\n  return (\r\n    <div className=\"Board\" style={boardStyles}>\r\n      {board.rows.map((row, y) =>\r\n        row.map((cell, x) => (\r\n          <BoardCell key={x * board.size.columns + x} cell={cell} />\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","export const Action = {\r\n  Left: \"Left\",\r\n  FastDrop: \"FastDrop\",\r\n  Pause: \"Pause\",\r\n  Quit: \"Quit\",\r\n  Right: \"Right\",\r\n  Rotate: \"Rotate\",\r\n  SlowDrop: \"SlowDrop\"\r\n};\r\n\r\nexport const Key = {\r\n  ArrowUp: Action.Rotate,\r\n  ArrowDown: Action.SlowDrop,\r\n  ArrowLeft: Action.Left,\r\n  ArrowRight: Action.Right,\r\n  KeyQ: Action.Quit,\r\n  KeyP: Action.Pause,\r\n  Space: Action.FastDrop\r\n};\r\n\r\nexport const actionIsDrop = (action) =>\r\n  [Action.SlowDrop, Action.FastDrop].includes(action);\r\n\r\nexport const actionForKey = (keyCode) => Key[keyCode];\r\n","export const defaultCell = {\r\n  occupied: false,\r\n  className: \"\"\r\n};\r\n","const className = \"tetromino\";\r\n\r\nexport const TETROMINOES = {\r\n  I: {\r\n    shape: [\r\n      [0, 1, 0, 0],\r\n      [0, 1, 0, 0],\r\n      [0, 1, 0, 0],\r\n      [0, 1, 0, 0]\r\n    ],\r\n    className: `${className} ${className}__i`\r\n  },\r\n  J: {\r\n    shape: [\r\n      [0, 1, 0],\r\n      [0, 1, 0],\r\n      [1, 1, 0]\r\n    ],\r\n    className: `${className} ${className}__j`\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, 1, 0],\r\n      [0, 1, 0],\r\n      [0, 1, 1]\r\n    ],\r\n    className: `${className} ${className}__l`\r\n  },\r\n  O: {\r\n    shape: [\r\n      [1, 1],\r\n      [1, 1]\r\n    ],\r\n    className: `${className} ${className}__o`\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, 1, 1],\r\n      [1, 1, 0],\r\n      [0, 0, 0]\r\n    ],\r\n    className: `${className} ${className}__s`\r\n  },\r\n  T: {\r\n    shape: [\r\n      [1, 1, 1],\r\n      [0, 1, 0],\r\n      [0, 0, 0]\r\n    ],\r\n    className: `${className} ${className}__t`\r\n  },\r\n  Z: {\r\n    shape: [\r\n      [1, 1, 0],\r\n      [0, 1, 1],\r\n      [0, 0, 0]\r\n    ],\r\n    className: `${className} ${className}__z`\r\n  }\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const keys = Object.keys(TETROMINOES);\r\n  const index = Math.floor(Math.random() * keys.length);\r\n  const key = keys[index];\r\n  return TETROMINOES[key];\r\n};\r\n\r\nexport const rotate = ({ piece, direction }) => {\r\n  // Transpose rows and columns\r\n  const newPiece = piece.map((_, index) =>\r\n    piece.map((column) => column[index])\r\n  );\r\n\r\n  // Reverse rows to get a rotated matrix\r\n  if (direction > 0) return newPiece.map((row) => row.reverse());\r\n\r\n  return newPiece.reverse();\r\n};\r\n\r\nexport const transferToBoard = ({\r\n  className,\r\n  isOccupied,\r\n  position,\r\n  rows,\r\n  shape\r\n}) => {\r\n  shape.forEach((row, y) => {\r\n    row.forEach((cell, x) => {\r\n      if (cell) {\r\n        const occupied = isOccupied;\r\n        const _y = y + position.row;\r\n        const _x = x + position.column;\r\n        rows[_y][_x] = { occupied, className };\r\n      }\r\n    });\r\n  });\r\n\r\n  return rows;\r\n};\r\n","import { defaultCell } from \"../business/Cell\";\r\nimport { movePlayer } from \"../business/PlayerController\";\r\nimport { transferToBoard } from \"../business/Tetrominoes\";\r\n\r\nexport const buildBoard = ({ rows, columns }) => {\r\n  const builtRows = Array.from({ length: rows }, () =>\r\n    Array.from({ length: columns }, () => ({ ...defaultCell }))\r\n  );\r\n\r\n  return {\r\n    rows: builtRows,\r\n    size: { rows, columns }\r\n  };\r\n};\r\n\r\nconst findDropPosition = ({ board, position, shape }) => {\r\n  let max = board.size.rows - position.row + 1;\r\n  let row = 0;\r\n\r\n  for (let i = 0; i < max; i++) {\r\n    const delta = { row: i, column: 0 };\r\n    const result = movePlayer({ delta, position, shape, board });\r\n    const { collided } = result;\r\n\r\n    if (collided) {\r\n      break;\r\n    }\r\n\r\n    row = position.row + i;\r\n  }\r\n\r\n  return { ...position, row };\r\n};\r\n\r\nexport const nextBoard = ({ board, player, resetPlayer, addLinesCleared }) => {\r\n  const { tetromino, position } = player;\r\n\r\n  // Copy and clear spaces used by pieces that\r\n  // hadn't collided and occupied spaces permanently\r\n  let rows = board.rows.map((row) =>\r\n    row.map((cell) => (cell.occupied ? cell : { ...defaultCell }))\r\n  );\r\n\r\n  // Drop position\r\n  const dropPosition = findDropPosition({\r\n    board,\r\n    position,\r\n    shape: tetromino.shape\r\n  });\r\n\r\n  // Place ghost\r\n  const className = `${tetromino.className} ${\r\n    player.isFastDropping ? \"\" : \"ghost\"\r\n  }`;\r\n  rows = transferToBoard({\r\n    className,\r\n    isOccupied: player.isFastDropping,\r\n    position: dropPosition,\r\n    rows,\r\n    shape: tetromino.shape\r\n  });\r\n\r\n  // Place the piece.\r\n  // If it collided, mark the board cells as collided\r\n  if (!player.isFastDropping) {\r\n    rows = transferToBoard({\r\n      className: tetromino.className,\r\n      isOccupied: player.collided,\r\n      position,\r\n      rows,\r\n      shape: tetromino.shape\r\n    });\r\n  }\r\n\r\n  // Check for cleared lines\r\n  const blankRow = rows[0].map((_) => ({ ...defaultCell }));\r\n  let linesCleared = 0;\r\n  rows = rows.reduce((acc, row) => {\r\n    if (row.every((column) => column.occupied)) {\r\n      linesCleared++;\r\n      acc.unshift([...blankRow]);\r\n    } else {\r\n      acc.push(row);\r\n    }\r\n\r\n    return acc;\r\n  }, []);\r\n\r\n  if (linesCleared > 0) {\r\n    addLinesCleared(linesCleared);\r\n  }\r\n\r\n  // If we collided, reset the player!\r\n  if (player.collided || player.isFastDropping) {\r\n    resetPlayer();\r\n  }\r\n\r\n  // Return the next board\r\n  return {\r\n    rows,\r\n    size: { ...board.size }\r\n  };\r\n};\r\n\r\nexport const hasCollision = ({ board, position, shape }) => {\r\n  for (let y = 0; y < shape.length; y++) {\r\n    const row = y + position.row;\r\n\r\n    for (let x = 0; x < shape[y].length; x++) {\r\n      if (shape[y][x]) {\r\n        const column = x + position.column;\r\n\r\n        if (\r\n          board.rows[row] &&\r\n          board.rows[row][column] &&\r\n          board.rows[row][column].occupied\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport const isWithinBoard = ({ board, position, shape }) => {\r\n  for (let y = 0; y < shape.length; y++) {\r\n    const row = y + position.row;\r\n\r\n    for (let x = 0; x < shape[y].length; x++) {\r\n      if (shape[y][x]) {\r\n        const column = x + position.column;\r\n        const isValidPosition = board.rows[row] && board.rows[row][column];\r\n\r\n        if (!isValidPosition) return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n","import { hasCollision, isWithinBoard } from \"../business/Board\";\r\nimport { rotate } from \"../business/Tetrominoes\";\r\nimport { Action } from \"../business/Input\";\r\n\r\nconst attemptRotation = ({ board, player, setPlayer }) => {\r\n  const shape = rotate({\r\n    piece: player.tetromino.shape,\r\n    direction: 1\r\n  });\r\n\r\n  const position = player.position;\r\n  const isValidRotation =\r\n    isWithinBoard({ board, position, shape }) &&\r\n    !hasCollision({ board, position, shape });\r\n\r\n  if (isValidRotation) {\r\n    setPlayer({\r\n      ...player,\r\n      tetromino: {\r\n        ...player.tetromino,\r\n        shape\r\n      }\r\n    });\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const movePlayer = ({ delta, position, shape, board }) => {\r\n  const desiredNextPosition = {\r\n    row: position.row + delta.row,\r\n    column: position.column + delta.column\r\n  };\r\n\r\n  const collided = hasCollision({\r\n    board,\r\n    position: desiredNextPosition,\r\n    shape\r\n  });\r\n\r\n  const isOnBoard = isWithinBoard({\r\n    board,\r\n    position: desiredNextPosition,\r\n    shape\r\n  });\r\n\r\n  const preventMove = !isOnBoard || (isOnBoard && collided);\r\n  const nextPosition = preventMove ? position : desiredNextPosition;\r\n\r\n  const isMovingDown = delta.row > 0;\r\n  const isHit = isMovingDown && (collided || !isOnBoard);\r\n\r\n  return { collided: isHit, nextPosition };\r\n};\r\n\r\nconst attemptMovement = ({ board, action, player, setPlayer, setGameOver }) => {\r\n  const delta = { row: 0, column: 0 };\r\n  let isFastDropping = false;\r\n\r\n  if (action === Action.FastDrop) {\r\n    isFastDropping = true;\r\n  } else if (action === Action.SlowDrop) {\r\n    delta.row += 1;\r\n  } else if (action === Action.Left) {\r\n    delta.column -= 1;\r\n  } else if (action === Action.Right) {\r\n    delta.column += 1;\r\n  }\r\n\r\n  const { collided, nextPosition } = movePlayer({\r\n    delta,\r\n    position: player.position,\r\n    shape: player.tetromino.shape,\r\n    board\r\n  });\r\n\r\n  // Did we collide immediately? If so, game over, man!\r\n  const isGameOver = collided && player.position.row === 0;\r\n  if (isGameOver) {\r\n    setGameOver(isGameOver);\r\n  }\r\n\r\n  setPlayer({\r\n    ...player,\r\n    collided,\r\n    isFastDropping,\r\n    position: nextPosition\r\n  });\r\n};\r\n\r\nexport const playerController = ({\r\n  action,\r\n  board,\r\n  player,\r\n  setPlayer,\r\n  setGameOver\r\n}) => {\r\n  if (!action) return;\r\n\r\n  if (action === Action.Rotate) {\r\n    attemptRotation({ board, player, setPlayer });\r\n  } else {\r\n    attemptMovement({ board, player, setPlayer, action, setGameOver });\r\n  }\r\n};\r\n","import \"./GameController.css\";\r\n\r\nimport { Action, actionForKey, actionIsDrop } from \"../business/Input\";\r\nimport { playerController } from \"../business/PlayerController\";\r\n\r\nimport { useDropTime } from \"../hooks/useDropTime\";\r\nimport { useInterval } from \"../hooks/useInterval\";\r\n\r\nconst GameController = ({\r\n  board,\r\n  gameStats,\r\n  player,\r\n  setGameOver,\r\n  setPlayer\r\n}) => {\r\n  const [dropTime, pauseDropTime, resumeDropTime] = useDropTime({\r\n    gameStats\r\n  });\r\n\r\n  useInterval(() => {\r\n    handleInput({ action: Action.SlowDrop });\r\n  }, dropTime);\r\n\r\n  const onKeyUp = ({ code }) => {\r\n    const action = actionForKey(code);\r\n    if (actionIsDrop(action)) resumeDropTime();\r\n  };\r\n\r\n  const onKeyDown = ({ code }) => {\r\n    const action = actionForKey(code);\r\n\r\n    if (action === Action.Pause) {\r\n      if (dropTime) {\r\n        pauseDropTime();\r\n      } else {\r\n        resumeDropTime();\r\n      }\r\n    } else if (action === Action.Quit) {\r\n      setGameOver(true);\r\n    } else {\r\n      if (actionIsDrop(action)) pauseDropTime();\r\n      if (!dropTime) {\r\n        return;\r\n      }\r\n      handleInput({ action });\r\n    }\r\n  };\r\n\r\n  const handleInput = ({ action }) => {\r\n    playerController({\r\n      action,\r\n      board,\r\n      player,\r\n      setPlayer,\r\n      setGameOver\r\n    });\r\n  };\r\n\r\n  return (\r\n    <input\r\n      className=\"GameController\"\r\n      type=\"text\"\r\n      onKeyDown={onKeyDown}\r\n      onKeyUp={onKeyUp}\r\n      autoFocus\r\n    />\r\n  );\r\n};\r\n\r\nexport default GameController;\r\n","import { useState, useCallback, useEffect } from \"react\";\r\n\r\nconst defaultDropTime = 1000;\r\nconst minimumDropTime = 100;\r\nconst speedIncrement = 50;\r\n\r\nexport const useDropTime = ({ gameStats }) => {\r\n  const [dropTime, setDropTime] = useState(defaultDropTime);\r\n  const [previousDropTime, setPreviousDropTime] = useState();\r\n\r\n  const resumeDropTime = useCallback(() => {\r\n    if (!previousDropTime) {\r\n      return;\r\n    }\r\n    setDropTime(previousDropTime);\r\n    setPreviousDropTime(null);\r\n  }, [previousDropTime]);\r\n\r\n  const pauseDropTime = useCallback(() => {\r\n    if (dropTime) {\r\n      setPreviousDropTime(dropTime);\r\n    }\r\n    setDropTime(null);\r\n  }, [dropTime, setPreviousDropTime]);\r\n\r\n  useEffect(() => {\r\n    const speed = speedIncrement * (gameStats.level - 1);\r\n    const newDropTime = Math.max(defaultDropTime - speed, minimumDropTime);\r\n\r\n    setDropTime(newDropTime);\r\n  }, [gameStats.level, setDropTime]);\r\n\r\n  return [dropTime, pauseDropTime, resumeDropTime];\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\n// Custom hook by Dan Abramov\r\nexport const useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./GameStats.css\";\r\n\r\nconst GameStats = ({ gameStats }) => {\r\n  const { level, points, linesCompleted, linesPerLevel } = gameStats;\r\n  const linesToLevel = linesPerLevel - linesCompleted;\r\n\r\n  return (\r\n    <ul className=\"GameStats GameStats__right\">\r\n      <li>Level</li>\r\n      <li className=\"value\">{level}</li>\r\n      <li>Lines to level</li>\r\n      <li className=\"value\">{linesToLevel}</li>\r\n      <li>Points</li>\r\n      <li className=\"value\">{points}</li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default React.memo(GameStats);\r\n","import \"./Preview.css\";\r\nimport React from \"react\";\r\n\r\nimport { buildBoard } from \"../business/Board\";\r\nimport { transferToBoard } from \"../business/Tetrominoes\";\r\n\r\nimport BoardCell from '../components/BoardCell';\r\n\r\nconst Preview = ({ tetromino, index }) => {\r\n  const { shape, className } = tetromino;\r\n\r\n  const board = buildBoard({ rows: 4, columns: 4 });\r\n\r\n  const style = { top: `${index * 15}vw` };\r\n\r\n  board.rows = transferToBoard({\r\n    className,\r\n    isOccupied: false,\r\n    position: { row: 0, column: 0 },\r\n    rows: board.rows,\r\n    shape\r\n  });\r\n\r\n  return (\r\n    <div className=\"Preview\" style={style}>\r\n      <div className=\"Preview-board\">\r\n        {board.rows.map((row, y) =>\r\n          row.map((cell, x) => (\r\n            <BoardCell key={x * board.size.columns + x} cell={cell} />\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Preview);\r\n","import React from \"react\";\r\n\r\nimport Preview from '../components/Preview';\r\n\r\nconst Previews = ({ tetrominoes }) => {\r\n  // We want everything except the last one\r\n  const previewTetrominoes = tetrominoes\r\n    .slice(1 - tetrominoes.length)\r\n    .reverse();\r\n\r\n  return (\r\n    <>\r\n      {previewTetrominoes.map((tetromino, index) => (\r\n        <Preview tetromino={tetromino} index={index} key={index} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Previews);\r\n","import { useState, useCallback } from \"react\";\r\n\r\nimport { randomTetromino } from \"../business/Tetrominoes\";\r\n\r\nconst buildPlayer = (previous) => {\r\n  let tetrominoes;\r\n\r\n  if (previous) {\r\n    tetrominoes = [...previous.tetrominoes];\r\n    tetrominoes.unshift(randomTetromino());\r\n  } else {\r\n    tetrominoes = Array(5)\r\n      .fill(0)\r\n      .map((_) => randomTetromino());\r\n  }\r\n\r\n  return {\r\n    collided: false,\r\n    isFastDropping: false,\r\n    position: { row: 0, column: 4 },\r\n    tetrominoes,\r\n    tetromino: tetrominoes.pop()\r\n  };\r\n};\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState(buildPlayer());\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer((prev) => buildPlayer(prev));\r\n  }, []);\r\n\r\n  return [player, setPlayer, resetPlayer];\r\n};\r\n","import \"./Tetris.css\";\r\n\r\nimport Board from \"./Board\";\r\nimport GameController from \"./GameController\";\r\nimport GameStats from \"./GameStats\";\r\nimport Previews from \"./Previews\";\r\n\r\nimport { useBoard } from '../hooks/useBoard';\r\nimport { useGameStats } from \"../hooks/useGameStats\";\r\nimport { usePlayer } from \"../hooks/usePlayer\";\r\n\r\nconst Tetris = ({ rows, columns, setGameOver }) => {\r\n  const [gameStats, addLinesCleared] = useGameStats();\r\n  const [player, setPlayer, resetPlayer] = usePlayer();\r\n  const [board, setBoard] = useBoard({\r\n    rows,\r\n    columns,\r\n    player,\r\n    resetPlayer,\r\n    addLinesCleared\r\n  });\r\n\r\n  return (\r\n    <div className=\"Tetris\">\r\n      <Board board={board} />\r\n      <GameStats gameStats={gameStats} />\r\n      <Previews tetrominoes={player.tetrominoes} />\r\n      <GameController\r\n        board={board}\r\n        gameStats={gameStats}\r\n        player={player}\r\n        setGameOver={setGameOver}\r\n        setPlayer={setPlayer}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nconst buildGameStats = () => ({\r\n  level: 1,\r\n  linesCompleted: 0,\r\n  linesPerLevel: 10,\r\n  points: 0\r\n});\r\n\r\nexport const useGameStats = () => {\r\n  const [gameStats, setGameStats] = useState(buildGameStats());\r\n\r\n  const addLinesCleared = useCallback((lines) => {\r\n    setGameStats((previous) => {\r\n      const points = previous.points + lines * 100;\r\n      const { linesPerLevel } = previous;\r\n      const newLinesCompleted = previous.linesCompleted + lines;\r\n      const level =\r\n        newLinesCompleted >= linesPerLevel\r\n          ? previous.level + 1\r\n          : previous.level;\r\n      const linesCompleted = newLinesCompleted % linesPerLevel;\r\n\r\n      return {\r\n        level,\r\n        linesCompleted,\r\n        linesPerLevel,\r\n        points\r\n      };\r\n    }, []);\r\n  }, []);\r\n\r\n  return [gameStats, addLinesCleared];\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport { buildBoard, nextBoard } from \"../business/Board\";\r\n\r\nexport const useBoard = ({\r\n  rows,\r\n  columns,\r\n  player,\r\n  resetPlayer,\r\n  addLinesCleared\r\n}) => {\r\n  const [board, setBoard] = useState(buildBoard({ rows, columns }));\r\n\r\n  useEffect(() => {\r\n    setBoard((previousBoard) =>\r\n      nextBoard({\r\n        board: previousBoard,\r\n        player,\r\n        resetPlayer,\r\n        addLinesCleared\r\n      })\r\n    );\r\n  }, [player, resetPlayer, addLinesCleared]);\r\n\r\n  return [board];\r\n};\r\n","import Menu from \"./Menu\";\r\nimport Tetris from \"./Tetris\";\r\n\r\nimport { useGameOver } from '../hooks/useGameOver';\r\n\r\nconst Game = ({ rows, columns }) => {\r\n  const [gameOver, setGameOver, resetGameOver] = useGameOver();\r\n\r\n  const start = () => resetGameOver();\r\n\r\n  return (\r\n    <div className=\"Game\">\r\n      {gameOver ? (\r\n        <Menu onClick={start} />\r\n      ) : (\r\n        <Tetris rows={rows} columns={columns} setGameOver={setGameOver} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useGameOver = () => {\r\n  const [gameOver, setGameOver] = useState(true);\r\n\r\n  const resetGameOver = useCallback(() => {\r\n    setGameOver(false);\r\n  }, []);\r\n\r\n  return [gameOver, setGameOver, resetGameOver];\r\n};\r\n","import \"./styles.css\";\n\nimport Game from \"./components/Game\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Game rows={20} columns={10} />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}